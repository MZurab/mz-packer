import { Subject, Observable } from "rxjs";
import { MzPackerInterface } from "./@abstract/@interface/mz-packer.interface";
import { MzInputOnChangeItem, MzInputOnChangeState, MzInputOnChangeStorage, MzState, MzStorageOfPacksType, MzSubscriptionsOfPackerType } from "./@abstract/@type/common.type";
import { MzPackInterface } from "./@abstract/@interface/mz-pack.interface";
import { MzItemTypeEnum } from "./@abstract/@enum/common.enum";
export declare class MzPacker implements MzPackerInterface {
    storage: any;
    storageOfPacks: MzStorageOfPacksType;
    subscriptions: MzSubscriptionsOfPackerType;
    private subscriptionsOnChangeState$;
    onChangeStorage$: Subject<MzInputOnChangeStorage>;
    private getAllPacksOrPackByPackId;
    onChangeItem$: Observable<MzInputOnChangeItem>;
    canChangeItem(pack: MzPackInterface, id: string, item: any): Promise<boolean>;
    preChangeItem(pack: MzPackInterface, id: string, item: any): Promise<void>;
    postChangeItem(pack: MzPackInterface, id: string, item: any): Promise<void>;
    changeItem(id: string, item: any, packId?: string, consistently?: boolean): Promise<void>;
    onRemoveItem$: Observable<MzInputOnChangeItem>;
    canRemoveItem(pack: MzPackInterface, id: string, item?: any): Promise<boolean>;
    preRemoveItem(pack: MzPackInterface, id: string, item?: any): Promise<void>;
    postRemoveItem(pack: MzPackInterface, id: string, item?: any): Promise<void>;
    removeItem(id: string, item?: any, packId?: string, consistently?: boolean): Promise<void>;
    onAddItem$: Observable<MzInputOnChangeItem>;
    canAddItem(pack: MzPackInterface, id: string, item: any): Promise<boolean>;
    preAddItem(pack: MzPackInterface, id: string, item: any): Promise<void>;
    postAddItem(pack: MzPackInterface, id: string, item: any): Promise<void>;
    addItem(id: string, item: any, packId?: string, consistently?: boolean, callback?: (packId: string, state: MzState, id: string, item: any) => void): Promise<void>;
    onWriteItem$: Observable<MzInputOnChangeItem>;
    canWriteItem(pack: MzPackInterface, id: string, item: any, typeChage: MzItemTypeEnum): Promise<boolean>;
    preWriteItem(pack: MzPackInterface, id: string, item: any, typeChage: MzItemTypeEnum): Promise<void>;
    postWriteItem(pack: MzPackInterface, id: string, item: any, typeChage: MzItemTypeEnum): Promise<void>;
    writeItem(id: string, item: any, typeChage: MzItemTypeEnum, packId?: string, consistently?: boolean, callback?: (packId: string, state: MzState, id: string, item: any) => void): Promise<void>;
    onChangeState$: Observable<MzInputOnChangeState>;
    private getStateFromPack;
    private changeStateByPack;
    canChangeState(pack: MzPackInterface, state: MzState): Promise<boolean>;
    preChangeState(pack: MzPackInterface, state: MzState): Promise<void>;
    postChangeState(pack: MzPackInterface, state: MzState): Promise<void>;
    changeState(newState: string, packId: string, consistently?: boolean): Promise<void>;
    addPack(...packs: MzPackInterface[]): void;
    addObserver(packId: string, forPackId: string): boolean;
    removeObserver(observerPackId: string, observerablePackId: string): boolean;
    private getIdsOfObservers;
    removePack(...packIds: string[]): void;
    private getPackFromStorageOfPacks;
    private getPackClassFromStorageOfPacks;
    private getAllPackClassFromStorageOfPacks;
    private addStorageOfPack;
    private removeStorageOfPack;
    private groupSubscribers;
    private runProslushka;
    private subscribeToAllPack;
    private unsubscribeToAllPack;
    private addPackToLocalStorageOfPacks;
    private removePackToLocalStorageOfPacks;
    constructor();
}
